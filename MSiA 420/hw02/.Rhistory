library(readxl)
df_4 = read_excel("HW2_data.xls", sheet = "FGL data")
df_4 = df_4[, -c(1)]
df_4[, -c(10)] = scale(df_4[, -c(10)])
df_4$type <- as.factor(df_4$type)
set.seed(420)
Nrep <- 3 #number of replicates of CV
K <- 10  #K-fold CV on each replicate
n.models <- 4 #number of different models to fit
n <- nrow(df_4)
y <- df_4$type
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=10, decay=.5, maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- predict(out, df_4[Ind[[k]],], type="class")
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=15, decay=.5, maxit=1000, trace=F)
yhat[Ind[[k]], 2] <- predict(out, df_4[Ind[[k]],], type="class")
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=20, decay=.5, maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(out, df_4[Ind[[k]],], type="class")
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=25, decay=.5, maxit=1000, trace=F)
yhat[Ind[[k]], 4] <- predict(out, df_4[Ind[[k]],], type="class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, function(x) mean(x == y)) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
best_nn_vars = c(c(15, 20, 25, 30)[which.max(AccuracyAve)], c(0.5, 0.1, 0.01, 0)[which.max(AccuracyAve)])
cat("Best NNet:", "\n", "Model:", which.max(AccuracyAve), "\n",
"Size:", c(15, 20, 25, 30)[which.max(AccuracyAve)], "\n",
"Decay:", c(0.5, 0.1, 0.01, 0)[which.max(AccuracyAve)])
Nrep <- 3 #number of replicates of CV
K <- 10  #K-fold CV on each replicate
n.models <- 4 #number of different models to fit
n <- nrow(df_4)
y <- y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
control <- rpart.control(minbucket = 3, cp = 0.00001, maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
yhat[Ind[[k]],1] <- predict(out,df_4[Ind[[k]],], type = "class")
control <- rpart.control(minbucket = 5, cp = 0.0001, maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
yhat[Ind[[k]],2]<-predict(out,df_4[Ind[[k]],], type = "class")
control <- rpart.control(minbucket = 7, cp = 0.001, maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
yhat[Ind[[k]],3]<-predict(out,df_4[Ind[[k]],], type = "class")
control <- rpart.control(minbucket = 10, cp = 0.01, maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
yhat[Ind[[k]],4]<-predict(out,df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, function(x) mean(x == y)) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
best_tree_vars = c(c(0.00001, 0.0001, 0.001, 0.01)[which.max(AccuracyAve)], c(3, 5, 7, 10)[which.max(AccuracyAve)])
cat("Best Tree:", "\n", "Model:", which.max(AccuracyAve), "\n",
"CP:", c(0.00001, 0.0001, 0.001, 0.01)[which.max(AccuracyAve)], "\n",
"Minbucket:", c(3, 5, 7, 10)[which.max(AccuracyAve)])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 1 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]],1] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, function(x) mean(x == y)) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
Nrep <- 3 #number of replicates of CV
K <- 10  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
as.factor(predict(out, df_4[Ind[[k]],], type="class"))
out
y
Nrep <- 3 #number of replicates of CV
K <- 10  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
print(x)
print(y)
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
print(x)
print(y)
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
print(x)
print(y)
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 10  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 2  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 3  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
Nrep <- 3 #number of replicates of CV
K <- 4  #K-fold CV on each replicate
n.models <- 3 #number of different models to fit
n <- nrow(df_4)
y <- as.numeric(df_4$type)
yhat <- matrix(0, n, n.models)
Accuracy <- matrix(0, Nrep, n.models)
check_acc <- function(x) {
return(mean(x == y))
}
for (j in 1:Nrep) {
Ind <- CVInd(n, K)
for (k in 1:K) {
out <- nnet(type ~ ., df_4[-Ind[[k]],], linout=F, skip=F, size=best_nn_vars[1], decay=best_nn_vars[2], maxit=1000, trace=F)
yhat[Ind[[k]], 1] <- as.factor(predict(out, df_4[Ind[[k]],], type="class"))
control <- rpart.control(minbucket = best_tree_vars[2], cp = best_tree_vars[1], maxsurrogate = 0, usesurrogate = 0, xval = 0)
out <- rpart(type~.,df_4[-Ind[[k]],], method = "class", control = control)
prune(tree = out, cp = best_tree_vars[1])
yhat[Ind[[k]], 2] <- predict(out,df_4[Ind[[k]],], type = "class")
model4 <- multinom(type~., df_4[-Ind[[k]],], maxit=1000, trace=F)
yhat[Ind[[k]], 3] <- predict(model4, df_4[Ind[[k]],], type = "class")
} #end of k loop
Accuracy[j,] <- apply(yhat, 2, check_acc) # Accuracy calculation
} #end of j loop
AccuracyAve <- apply(Accuracy, 2, mean) #averaged mean accuracy
AccuracySd <- apply(Accuracy, 2, sd)  #SD of mean accuracy
cat("Models", "\n",
"- NNet:", AccuracyAve[1], "\n",
"- Tree:", AccuracyAve[2], "\n",
"- MNLogit:", AccuracyAve[3])
